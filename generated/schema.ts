// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Employee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("status", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Employee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Employee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Employee", id.toString(), this);
    }
  }

  static load(id: string): Employee | null {
    return changetype<Employee | null>(store.get("Employee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get email(): string | null {
    let value = this.get("email");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set email(value: string | null) {
    if (!value) {
      this.unset("email");
    } else {
      this.set("email", Value.fromString(<string>value));
    }
  }

  get hashData(): string | null {
    let value = this.get("hashData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hashData(value: string | null) {
    if (!value) {
      this.unset("hashData");
    } else {
      this.set("hashData", Value.fromString(<string>value));
    }
  }

  get partner(): string | null {
    let value = this.get("partner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set partner(value: string | null) {
    if (!value) {
      this.unset("partner");
    } else {
      this.set("partner", Value.fromString(<string>value));
    }
  }

  get registeredSince(): BigInt | null {
    let value = this.get("registeredSince");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set registeredSince(value: BigInt | null) {
    if (!value) {
      this.unset("registeredSince");
    } else {
      this.set("registeredSince", Value.fromBigInt(<BigInt>value));
    }
  }

  get allowedToWithdraw(): BigInt | null {
    let value = this.get("allowedToWithdraw");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set allowedToWithdraw(value: BigInt | null) {
    if (!value) {
      this.unset("allowedToWithdraw");
    } else {
      this.set("allowedToWithdraw", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalAllowance(): BigInt | null {
    let value = this.get("totalAllowance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalAllowance(value: BigInt | null) {
    if (!value) {
      this.unset("totalAllowance");
    } else {
      this.set("totalAllowance", Value.fromBigInt(<BigInt>value));
    }
  }

  get monthlyWage(): BigInt | null {
    let value = this.get("monthlyWage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set monthlyWage(value: BigInt | null) {
    if (!value) {
      this.unset("monthlyWage");
    } else {
      this.set("monthlyWage", Value.fromBigInt(<BigInt>value));
    }
  }

  get registrationHash(): string | null {
    let value = this.get("registrationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrationHash(value: string | null) {
    if (!value) {
      this.unset("registrationHash");
    } else {
      this.set("registrationHash", Value.fromString(<string>value));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (!value) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Partner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("status", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Partner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Partner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Partner", id.toString(), this);
    }
  }

  static load(id: string): Partner | null {
    return changetype<Partner | null>(store.get("Partner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (!value) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(<BigInt>value));
    }
  }

  get email(): string | null {
    let value = this.get("email");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set email(value: string | null) {
    if (!value) {
      this.unset("email");
    } else {
      this.set("email", Value.fromString(<string>value));
    }
  }

  get hashData(): string | null {
    let value = this.get("hashData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set hashData(value: string | null) {
    if (!value) {
      this.unset("hashData");
    } else {
      this.set("hashData", Value.fromString(<string>value));
    }
  }

  get currentMonth(): string | null {
    let value = this.get("currentMonth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentMonth(value: string | null) {
    if (!value) {
      this.unset("currentMonth");
    } else {
      this.set("currentMonth", Value.fromString(<string>value));
    }
  }

  get months(): Array<string> | null {
    let value = this.get("months");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set months(value: Array<string> | null) {
    if (!value) {
      this.unset("months");
    } else {
      this.set("months", Value.fromStringArray(<Array<string>>value));
    }
  }

  get employees(): Array<string> | null {
    let value = this.get("employees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set employees(value: Array<string> | null) {
    if (!value) {
      this.unset("employees");
    } else {
      this.set("employees", Value.fromStringArray(<Array<string>>value));
    }
  }

  get registrationHash(): string | null {
    let value = this.get("registrationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrationHash(value: string | null) {
    if (!value) {
      this.unset("registrationHash");
    } else {
      this.set("registrationHash", Value.fromString(<string>value));
    }
  }
}

export class Month extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Month entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Month entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Month", id.toString(), this);
    }
  }

  static load(id: string): Month | null {
    return changetype<Month | null>(store.get("Month", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partner(): string | null {
    let value = this.get("partner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set partner(value: string | null) {
    if (!value) {
      this.unset("partner");
    } else {
      this.set("partner", Value.fromString(<string>value));
    }
  }

  get startTime(): BigInt | null {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt | null) {
    if (!value) {
      this.unset("startTime");
    } else {
      this.set("startTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockFrom(): BigInt | null {
    let value = this.get("blockFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockFrom(value: BigInt | null) {
    if (!value) {
      this.unset("blockFrom");
    } else {
      this.set("blockFrom", Value.fromBigInt(<BigInt>value));
    }
  }

  get Withdrawals(): Array<string> | null {
    let value = this.get("Withdrawals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set Withdrawals(value: Array<string> | null) {
    if (!value) {
      this.unset("Withdrawals");
    } else {
      this.set("Withdrawals", Value.fromStringArray(<Array<string>>value));
    }
  }

  get registrationHash(): string | null {
    let value = this.get("registrationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrationHash(value: string | null) {
    if (!value) {
      this.unset("registrationHash");
    } else {
      this.set("registrationHash", Value.fromString(<string>value));
    }
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Withdrawal entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get byEmployee(): string | null {
    let value = this.get("byEmployee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set byEmployee(value: string | null) {
    if (!value) {
      this.unset("byEmployee");
    } else {
      this.set("byEmployee", Value.fromString(<string>value));
    }
  }

  get time(): BigInt | null {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt | null) {
    if (!value) {
      this.unset("time");
    } else {
      this.set("time", Value.fromBigInt(<BigInt>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get month(): string | null {
    let value = this.get("month");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set month(value: string | null) {
    if (!value) {
      this.unset("month");
    } else {
      this.set("month", Value.fromString(<string>value));
    }
  }

  get registrationHash(): string | null {
    let value = this.get("registrationHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrationHash(value: string | null) {
    if (!value) {
      this.unset("registrationHash");
    } else {
      this.set("registrationHash", Value.fromString(<string>value));
    }
  }
}

export class AllPartner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("partners", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllPartner entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllPartner entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllPartner", id.toString(), this);
    }
  }

  static load(id: string): AllPartner | null {
    return changetype<AllPartner | null>(store.get("AllPartner", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get partners(): Array<string> {
    let value = this.get("partners");
    return value!.toStringArray();
  }

  set partners(value: Array<string>) {
    this.set("partners", Value.fromStringArray(value));
  }
}

export class AllEmployee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("employees", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllEmployee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllEmployee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllEmployee", id.toString(), this);
    }
  }

  static load(id: string): AllEmployee | null {
    return changetype<AllEmployee | null>(store.get("AllEmployee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get employees(): Array<string> {
    let value = this.get("employees");
    return value!.toStringArray();
  }

  set employees(value: Array<string>) {
    this.set("employees", Value.fromStringArray(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Block entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Log extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("log", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Log entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Log entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Log", id.toString(), this);
    }
  }

  static load(id: string): Log | null {
    return changetype<Log | null>(store.get("Log", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get log(): string {
    let value = this.get("log");
    return value!.toString();
  }

  set log(value: string) {
    this.set("log", Value.fromString(value));
  }
}

export class AllLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("logs", Value.fromStringArray(new Array(0)));
    this.set("nextId", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AllLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AllLog entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AllLog", id.toString(), this);
    }
  }

  static load(id: string): AllLog | null {
    return changetype<AllLog | null>(store.get("AllLog", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get logs(): Array<string> {
    let value = this.get("logs");
    return value!.toStringArray();
  }

  set logs(value: Array<string>) {
    this.set("logs", Value.fromStringArray(value));
  }

  get nextId(): i32 {
    let value = this.get("nextId");
    return value!.toI32();
  }

  set nextId(value: i32) {
    this.set("nextId", Value.fromI32(value));
  }
}
