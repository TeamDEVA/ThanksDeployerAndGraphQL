type Employee @entity @mutation {
  id: ID!
  status: Boolean
  email: String
  hashData: String
  partner: Partner
  registeredSince: Time
  currentBalance: BigInt
  Withdrawals: [Withdrawal!]@derivedFrom(field: "employee")
  allowedToWithdraw: BigInt # currently available to withdraw
  totalAllowance: BigInt # monthlyWage/2
  monthlyWage: BigInt # monthlyWage
  registrationHash: String 
  time: BigInt
}

type Partner @entity {
  id: ID!
  status: Boolean
  blocked: Boolean
  balance: BigInt
  email: String 
  hashData: String
  currentMonth: Month
  months: [Month!]@derivedFrom(field: "partner")
  employees: [Employee!]@derivedFrom(field: "partner")
  registrationHash: String
}

type Time @entity {
  id: ID!
  timestamp: BigInt 
  UTC: String
  # partner: Partner
  # startFrom: BigInt
  # blockFrom: BigInt
  # Withdrawals: [Withdrawal!]@derivedFrom(field: "month")
  # registrationHash: String 
}

type Month @entity {
  id: ID!
  partner: Partner
  startFrom: Time
  blockFrom: Time
  Withdrawals: [Withdrawal!]@derivedFrom(field: "month")
  registrationHash: String 
}

type Withdrawal @entity {
  id: ID!
  employee: Employee
  time: Time
  amount: BigInt
  month: Month
  registrationHash: String 
}

type AllPartner @entity {
  id: ID!
  partners: [Partner!]! @relation  #one AllPartner to many Partner
}

type AllEmployee @entity {
  id: ID!
  employees: [Employee!]! @relation  #one AllPartner to many Partner
}

type Block @entity {
  id: ID!
}
type Log @entity {
  id: ID!
  log: String!
}
type AllLog @entity {
  id: ID!
  logs: [Log!]! @relation
  nextId: Int!
}