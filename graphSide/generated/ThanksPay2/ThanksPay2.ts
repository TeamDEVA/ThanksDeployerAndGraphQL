// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class deleteEmployeeEvent extends ethereum.Event {
  get params(): deleteEmployeeEvent__Params {
    return new deleteEmployeeEvent__Params(this);
  }
}

export class deleteEmployeeEvent__Params {
  _event: deleteEmployeeEvent;

  constructor(event: deleteEmployeeEvent) {
    this._event = event;
  }

  get workerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get partnerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class newEmployeeEvent extends ethereum.Event {
  get params(): newEmployeeEvent__Params {
    return new newEmployeeEvent__Params(this);
  }
}

export class newEmployeeEvent__Params {
  _event: newEmployeeEvent;

  constructor(event: newEmployeeEvent) {
    this._event = event;
  }

  get email(): string {
    return this._event.parameters[0].value.toString();
  }

  get workerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get partnerId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get monthlyWage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get workerHashData(): string {
    return this._event.parameters[4].value.toString();
  }

  get time(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get allowedToWithdraw(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class newMonthEvent extends ethereum.Event {
  get params(): newMonthEvent__Params {
    return new newMonthEvent__Params(this);
  }
}

export class newMonthEvent__Params {
  _event: newMonthEvent;

  constructor(event: newMonthEvent) {
    this._event = event;
  }

  get partnerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nextPayday(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class newPartnerEvent extends ethereum.Event {
  get params(): newPartnerEvent__Params {
    return new newPartnerEvent__Params(this);
  }
}

export class newPartnerEvent__Params {
  _event: newPartnerEvent;

  constructor(event: newPartnerEvent) {
    this._event = event;
  }

  get partnerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get partnerEmail(): string {
    return this._event.parameters[1].value.toString();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get partnerLicenseId(): string {
    return this._event.parameters[3].value.toString();
  }

  get partnerHashData(): string {
    return this._event.parameters[4].value.toString();
  }

  get lastPayday(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get nextPayday(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class newWithdrawalReceipt extends ethereum.Event {
  get params(): newWithdrawalReceipt__Params {
    return new newWithdrawalReceipt__Params(this);
  }
}

export class newWithdrawalReceipt__Params {
  _event: newWithdrawalReceipt;

  constructor(event: newWithdrawalReceipt) {
    this._event = event;
  }

  get workerId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get time(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ThanksPay2__employeesOfPartnerResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class ThanksPay2__findEmployeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class ThanksPay2__findPartnerResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class ThanksPay2 extends ethereum.SmartContract {
  static bind(address: Address): ThanksPay2 {
    return new ThanksPay2("ThanksPay2", address);
  }

  employeeCurrentId(): BigInt {
    let result = super.call(
      "employeeCurrentId",
      "employeeCurrentId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_employeeCurrentId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "employeeCurrentId",
      "employeeCurrentId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  employeesOfPartner(
    param0: BigInt,
    param1: BigInt
  ): ThanksPay2__employeesOfPartnerResult {
    let result = super.call(
      "employeesOfPartner",
      "employeesOfPartner(uint256,uint256):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ThanksPay2__employeesOfPartnerResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_employeesOfPartner(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<ThanksPay2__employeesOfPartnerResult> {
    let result = super.tryCall(
      "employeesOfPartner",
      "employeesOfPartner(uint256,uint256):(uint256,uint256,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ThanksPay2__employeesOfPartnerResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  findEmployee(param0: BigInt): ThanksPay2__findEmployeeResult {
    let result = super.call(
      "findEmployee",
      "findEmployee(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ThanksPay2__findEmployeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_findEmployee(
    param0: BigInt
  ): ethereum.CallResult<ThanksPay2__findEmployeeResult> {
    let result = super.tryCall(
      "findEmployee",
      "findEmployee(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ThanksPay2__findEmployeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  findPartner(param0: BigInt): ThanksPay2__findPartnerResult {
    let result = super.call(
      "findPartner",
      "findPartner(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ThanksPay2__findPartnerResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_findPartner(
    param0: BigInt
  ): ethereum.CallResult<ThanksPay2__findPartnerResult> {
    let result = super.tryCall(
      "findPartner",
      "findPartner(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ThanksPay2__findPartnerResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  getWithdrawable(employeeId: BigInt, partnerId: BigInt): BigInt {
    let result = super.call(
      "getWithdrawable",
      "getWithdrawable(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(employeeId),
        ethereum.Value.fromUnsignedBigInt(partnerId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawable(
    employeeId: BigInt,
    partnerId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawable",
      "getWithdrawable(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(employeeId),
        ethereum.Value.fromUnsignedBigInt(partnerId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  partnerCurrentId(): BigInt {
    let result = super.call(
      "partnerCurrentId",
      "partnerCurrentId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_partnerCurrentId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "partnerCurrentId",
      "partnerCurrentId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeleteEmployeeCall extends ethereum.Call {
  get inputs(): DeleteEmployeeCall__Inputs {
    return new DeleteEmployeeCall__Inputs(this);
  }

  get outputs(): DeleteEmployeeCall__Outputs {
    return new DeleteEmployeeCall__Outputs(this);
  }
}

export class DeleteEmployeeCall__Inputs {
  _call: DeleteEmployeeCall;

  constructor(call: DeleteEmployeeCall) {
    this._call = call;
  }

  get workerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get partnerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeleteEmployeeCall__Outputs {
  _call: DeleteEmployeeCall;

  constructor(call: DeleteEmployeeCall) {
    this._call = call;
  }
}

export class NewEmployeeCall extends ethereum.Call {
  get inputs(): NewEmployeeCall__Inputs {
    return new NewEmployeeCall__Inputs(this);
  }

  get outputs(): NewEmployeeCall__Outputs {
    return new NewEmployeeCall__Outputs(this);
  }
}

export class NewEmployeeCall__Inputs {
  _call: NewEmployeeCall;

  constructor(call: NewEmployeeCall) {
    this._call = call;
  }

  get workerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get partnerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get workerEmail(): string {
    return this._call.inputValues[2].value.toString();
  }

  get workerHashData(): string {
    return this._call.inputValues[3].value.toString();
  }

  get monthlyFullWage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class NewEmployeeCall__Outputs {
  _call: NewEmployeeCall;

  constructor(call: NewEmployeeCall) {
    this._call = call;
  }
}

export class NewPartnerCall extends ethereum.Call {
  get inputs(): NewPartnerCall__Inputs {
    return new NewPartnerCall__Inputs(this);
  }

  get outputs(): NewPartnerCall__Outputs {
    return new NewPartnerCall__Outputs(this);
  }
}

export class NewPartnerCall__Inputs {
  _call: NewPartnerCall;

  constructor(call: NewPartnerCall) {
    this._call = call;
  }

  get partnerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get partnerEmail(): string {
    return this._call.inputValues[1].value.toString();
  }

  get balance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get lastPayday(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get nextPayday(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get partnerLicenseId(): string {
    return this._call.inputValues[5].value.toString();
  }

  get partnerHashData(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class NewPartnerCall__Outputs {
  _call: NewPartnerCall;

  constructor(call: NewPartnerCall) {
    this._call = call;
  }
}

export class PayDayCall extends ethereum.Call {
  get inputs(): PayDayCall__Inputs {
    return new PayDayCall__Inputs(this);
  }

  get outputs(): PayDayCall__Outputs {
    return new PayDayCall__Outputs(this);
  }
}

export class PayDayCall__Inputs {
  _call: PayDayCall;

  constructor(call: PayDayCall) {
    this._call = call;
  }

  get partnerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nextPayday(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get balanceAdd(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class PayDayCall__Outputs {
  _call: PayDayCall;

  constructor(call: PayDayCall) {
    this._call = call;
  }
}

export class WithdrawMoneyCall extends ethereum.Call {
  get inputs(): WithdrawMoneyCall__Inputs {
    return new WithdrawMoneyCall__Inputs(this);
  }

  get outputs(): WithdrawMoneyCall__Outputs {
    return new WithdrawMoneyCall__Outputs(this);
  }
}

export class WithdrawMoneyCall__Inputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }

  get employeeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get partnerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawMoneyCall__Outputs {
  _call: WithdrawMoneyCall;

  constructor(call: WithdrawMoneyCall) {
    this._call = call;
  }
}
